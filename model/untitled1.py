"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eODJfBAnCgqAg9RQebJifZQuFWp_kIhb
"""

from google.colab import files
uploaded = files.upload()

import zipfile
import os

zip_path = '/content/dataset.zip'  
extract_path = '/content/car_images'
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)
print("Unzipped to", extract_path)

import os
import zipfile
import shutil
from sklearn.model_selection import train_test_split
from google.colab import drive
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNet
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

print("Libraries imported!")

dataset_dir = '/content/car_images/dataset'
print("Using dataset at:", dataset_dir)

print("\nTrain contents:", os.listdir(os.path.join(dataset_dir, 'train')))
print("Test contents:", os.listdir(os.path.join(dataset_dir, 'test')))

IMG_SIZE = (224, 224)
BATCH_SIZE = 32
EPOCHS = 20
FINE_TUNE_EPOCHS = 10

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_datagen = ImageDataGenerator(rescale=1./255)  

train_generator = train_datagen.flow_from_directory(
    os.path.join(dataset_dir, 'train'),  
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary'  
)

val_generator = val_datagen.flow_from_directory(
    os.path.join(dataset_dir, 'test'),  
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

base_model = MobileNet(weights='imagenet', include_top=False, input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3))
base_model.trainable = False

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer=Adam(learning_rate=0.001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

history = model.fit(
    train_generator,
    epochs=EPOCHS,
    validation_data=val_generator
)

base_model.trainable = True
for layer in base_model.layers[:100]:  # Adjust based on model layers if needed
    layer.trainable = False

model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

history_fine = model.fit(
    train_generator,
    epochs=FINE_TUNE_EPOCHS,
    validation_data=val_generator
)

model_path = '/content/drive/MyDrive/car_dirty_clean_model.h5'
model.save(model_path)
print(f"Training complete! Model saved to {model_path}")

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from google.colab import files  

model_path = '/content/drive/MyDrive/car_dirty_clean_model.h5'
model = load_model(model_path)
print("Model loaded successfully!")

uploaded = files.upload()  
test_img_path = list(uploaded.keys())[0]  


IMG_SIZE = (224, 224)  
img = image.load_img(test_img_path, target_size=IMG_SIZE)
img_array = image.img_to_array(img) / 255.0  
img_array = np.expand_dims(img_array, axis=0)  

prediction = model.predict(img_array)[0][0]  
label = 'dirty' if prediction > 0.5 else 'clean'  
confidence = prediction if label == 'dirty' else (1 - prediction)

print(f"Predicted: {label} (confidence: {confidence:.2f})")

